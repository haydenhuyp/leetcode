class Solution {
    public int maxPoints(int[][] points) {
        if (points.length == 0) {
            return 0;
        } else if (points.length == 1) {
            return 1;
        } else if (points.length == 2) {
            return 2;
        }
        int max = 0;
        // check in rows to count the number of lines that have the same slope
        for (int i = 0; i < points.length; i++) {
            HashMap<Double, Integer> hashMap = new HashMap<>();
            for (int j = 0; j < points.length; j++) {
                if (i == j) {
                    continue;
                }
                double slope = (double) (points[j][1] - points[i][1]) / (points[j][0] - points[i][0]);
                if (hashMap.containsKey(slope)) {
                    hashMap.put(slope, hashMap.get(slope) + 1);
                } else {
                    hashMap.put(slope, 2);
                }
            }
            if (getMaxInMap(hashMap) > max) {
                max = getMaxInMap(hashMap);
            }
        }

        // check in cols to count the number of lines that have the same slope
        for (int i = 0; i < points.length; i++) {
            HashMap<Double, Integer> hashMap = new HashMap<>();
            for (int j = 0; j < points.length; j++) {
                if (i == j) {
                    continue;
                }
                double slope = (double) (points[j][0] - points[i][0]) / (points[j][1] - points[i][1]);
                if (hashMap.containsKey(slope)) {
                    hashMap.put(slope, hashMap.get(slope) + 1);
                } else {
                    hashMap.put(slope, 2);
                }
            }
            if (getMaxInMap(hashMap) > max) {
                max = getMaxInMap(hashMap);
            }
        }
        return max;
    }

    public static int getMaxInMap(HashMap<Double, Integer> hashMap) {
        int max = 0;
        for (Map.Entry<Double, Integer> entry : hashMap.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
            }
        }
        return max;
    }
}
