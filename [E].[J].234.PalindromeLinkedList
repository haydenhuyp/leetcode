/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        /* Using String */
        ListNode current = head;
        StringBuilder s = new StringBuilder();
        while (current != null){
            s.append(current.val);
            current = current.next;
        }

        String s1 = s.toString();
        String s2 = s.reverse().toString();
        if (s1.compareTo(s2) == 0){
            return true;
        } else return false;

        /* Using HashMap */
        ListNode current = head;
        HashMap<Integer, Integer> hashMap = new HashMap<>();
        int i = 1;
        while (current != null){
            hashMap.put(i++, current.val);
            current = current.next;
        }
        for (int j = 1; j < i; j++) {
            if (!Objects.equals(hashMap.get(j), hashMap.get(i - j))){
                return false;
            }
        }
        return true;
    }
}
