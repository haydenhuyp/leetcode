/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        /* First solution using chase-and-catch */
        if (head == null || head.next == null) return false;
        ListNode slow = head;
        ListNode fast = head.next;
        while (slow != null && fast.next != null && fast.next.next != null){
            if (slow == fast){
                return true;
            }
            fast = fast.next.next;
            slow = slow.next;
        }
        return false;

        /* Second solution using hash map */
        if (head == null || head.next == null) return false;
        HashMap<ListNode, Boolean> hashMap = new HashMap<>();
        ListNode c = head;
        while (c.next != null){
            if (hashMap.containsKey(c)){
                return true;
            }
            hashMap.put(c, true);
            c = c.next;
        }
        return false;
    }
}
