class Queue(object):
    def __init__(self):
        self.__list = []

    # add an item to the queue
    def enqueue(self, item):
        self.__list.append(item)

    # remove an item from the queue
    def dequeue(self):
        if self.size() > 0:
            return self.__list.pop(0)
        else:
            return None

    # return the size of the queue
    def size(self):
        return len(self.__list)


class MyStack:

    def __init__(self):
        self.q1 = Queue()
        self.q2 = Queue()

    def push(self, x: int) -> None:
        self.q1.enqueue(x)

    def pop(self) -> int:
        while self.q1.size() > 1:
            self.q2.enqueue(self.q1.dequeue())
        returnObject = self.q1.dequeue()
        while self.q2.size() > 0:
            self.q1.enqueue(self.q2.dequeue())
        return returnObject

    def top(self) -> int:
        while self.q1.size() > 1:
            self.q2.enqueue(self.q1.dequeue())
        returnObject = self.q1.dequeue()
        self.q2.enqueue(returnObject)
        while self.q2.size() > 0:
            self.q1.enqueue(self.q2.dequeue())
        return returnObject

    def empty(self) -> bool:
        if self.q1.size() == 0:
            return True
        else:
            return False
